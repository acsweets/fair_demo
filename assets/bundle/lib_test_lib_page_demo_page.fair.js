GLOBAL['#FairKey#']=(function(__initProps__){const __global__=this;defineModule(1,function(__mod__){with(__mod__.imports){function SugarIterable(){const inner=SugarIterable.__inner__;if(this==__global__){return new SugarIterable({__args__:arguments});}else{const args=arguments.length>0?arguments[0].__args__||arguments:[];inner.apply(this,args);SugarIterable.prototype.ctor.apply(this,args);return this;}}SugarIterable.__inner__=function inner(){};SugarIterable.prototype={};SugarIterable.prototype.ctor=function(){};SugarIterable._=function ctor(){const __thiz__=Object.create(SugarIterable.prototype);SugarIterable.__inner__.call(__thiz__);with(__thiz__){(function(){}).call(__thiz__);}return __thiz__;};SugarIterable.iterator=(input)=>input.iterator;;SugarIterable.length=(input)=>input.length;;SugarIterable.isEmpty=(input)=>input.isEmpty;;SugarIterable.isNotEmpty=(input)=>input.isNotEmpty;;SugarIterable.first=(input)=>input.first;;SugarIterable.last=(input)=>input.last;;SugarIterable.single=(input)=>input.single;;SugarIterable.castFrom=(source)=>Iterable.castFrom(source);;SugarIterable.cast=(input)=>input.cast();;SugarIterable.followedBy=(input,other)=>input.followedBy(other);;SugarIterable.map=(input,toElement)=>input.map(toElement);;SugarIterable.where=(input,test)=>input.where(test);;SugarIterable.whereType=(input)=>input.whereType();;SugarIterable.expand=(input,toElements)=>input.expand(toElements);;SugarIterable.contains=(input,element)=>input.contains(element);;SugarIterable.forEach=(input,action)=>input.forEach(action);;SugarIterable.reduce=(input,combine)=>input.reduce(combine);;SugarIterable.fold=(input,initialValue,combine)=>input.fold(initialValue,combine);;SugarIterable.every=(input,test)=>input.every(test);;SugarIterable.join=(input)=>input.join(separator);;SugarIterable.any=(input,test)=>input.any(test);;SugarIterable.toList=(input)=>input.toList({growable:growable});;SugarIterable.toSet=(input)=>input.toSet();;SugarIterable.take=(input,count)=>input.take(count);;SugarIterable.takeWhile=(input,test)=>input.takeWhile(test);;SugarIterable.skip=(input,count)=>input.skip(count);;SugarIterable.skipWhile=(input,test)=>input.skipWhile(test);;SugarIterable.firstWhere=(input,test)=>input.firstWhere(test,{orElse:orElse});;SugarIterable.lastWhere=(input,test)=>input.lastWhere(test,{orElse:orElse});;SugarIterable.singleWhere=(input,test)=>input.singleWhere(test,{orElse:orElse});;SugarIterable.elementAt=(input,index)=>input.elementAt(index);;SugarIterable.iterableToString=(input)=>input.toString();;SugarIterable.iterableToShortString=(iterable)=>Iterable.iterableToShortString(iterable,leftDelimiter,rightDelimiter);;SugarIterable.iterableToFullString=(iterable)=>Iterable.iterableToFullString(iterable,leftDelimiter,rightDelimiter);;function SugarMap(){const inner=SugarMap.__inner__;if(this==__global__){return new SugarMap({__args__:arguments});}else{const args=arguments.length>0?arguments[0].__args__||arguments:[];inner.apply(this,args);SugarMap.prototype.ctor.apply(this,args);return this;}}SugarMap.__inner__=function inner(){};SugarMap.prototype={};SugarMap.prototype.ctor=function(){};SugarMap._=function ctor(){const __thiz__=Object.create(SugarMap.prototype);SugarMap.__inner__.call(__thiz__);with(__thiz__){(function(){}).call(__thiz__);}return __thiz__;};SugarMap.entries=(input)=>input.entries;;SugarMap.keys=(input)=>input.keys;;SugarMap.values=(input)=>input.values;;SugarMap.length=(input)=>input.length;;SugarMap.isEmpty=(input)=>input.isEmpty;;SugarMap.isNotEmpty=(input)=>input.isNotEmpty;;SugarMap.containsValue=(input,value)=>input.containsValue(value);;SugarMap.containsKey=(input,key)=>input.containsKey(key);;SugarMap.get=(input,key)=>input.__op_idx__(key);;SugarMap.set=(input,key,value)=>input.__op_idxeq__(key,value);;SugarMap.addEntries=(input,newEntries)=>input.addEntries(newEntries);;SugarMap.update=(input,key,update)=>input.update(key,update,{ifAbsent:ifAbsent});;SugarMap.updateAll=(input,update)=>input.updateAll(update);;SugarMap.removeWhere=(input,test)=>input.removeWhere(test);;SugarMap.putIfAbsent=(input,key,ifAbsent)=>input.putIfAbsent(key,ifAbsent);;SugarMap.addAll=(input,other)=>input.addAll(other);;SugarMap.remove=(input,key)=>input.remove(key);;SugarMap.clear=(input)=>input.clear();;SugarMap.forEach=(input,action)=>input.forEach(action);;function SugarBool(){const inner=SugarBool.__inner__;if(this==__global__){return new SugarBool({__args__:arguments});}else{const args=arguments.length>0?arguments[0].__args__||arguments:[];inner.apply(this,args);SugarBool.prototype.ctor.apply(this,args);return this;}}SugarBool.__inner__=function inner(){};SugarBool.prototype={};SugarBool.prototype.ctor=function(){};SugarBool._=function ctor(){const __thiz__=Object.create(SugarBool.prototype);SugarBool.__inner__.call(__thiz__);with(__thiz__){(function(){}).call(__thiz__);}return __thiz__;};SugarBool.invert=(input)=>!input;;SugarBool.parse=(source)=>bool.parse(source,{caseSensitive:caseSensitive});;SugarBool.tryParse=(source)=>bool.tryParse(source,{caseSensitive:caseSensitive});;SugarBool.and=(input,other)=>input&other();;SugarBool.inclusiveOr=(input,other)=>input|other();;SugarBool.exclusiveOr=(input,other)=>input^other;;SugarBool.boolToString=(input)=>input.toString();;function SugarDouble(){const inner=SugarDouble.__inner__;if(this==__global__){return new SugarDouble({__args__:arguments});}else{const args=arguments.length>0?arguments[0].__args__||arguments:[];inner.apply(this,args);SugarDouble.prototype.ctor.apply(this,args);return this;}}SugarDouble.__inner__=function inner(){};SugarDouble.prototype={};SugarDouble.prototype.ctor=function(){};SugarDouble._=function ctor(){const __thiz__=Object.create(SugarDouble.prototype);SugarDouble.__inner__.call(__thiz__);with(__thiz__){(function(){}).call(__thiz__);}return __thiz__;};SugarDouble.nan=()=>double.nan;;SugarDouble.infinity=()=>double.infinity;;SugarDouble.negativeInfinity=()=>double.negativeInfinity;;SugarDouble.minPositive=()=>double.minPositive;;SugarDouble.maxFinite=()=>double.maxFinite;;SugarDouble.sign=(input)=>input.sign;;SugarDouble.remainder=(input,other)=>input.remainder(other);;SugarDouble.adds=(input,other)=>input+other;;SugarDouble.subtracts=(input,other)=>input-other;;SugarDouble.multiplies=(input,other)=>input*other;;SugarDouble.euclideanModulo=(input,other)=>input%other;;SugarDouble.divides=(input,other)=>input/other;;SugarDouble.truncatingDivision=(input,other)=>input~/other;;SugarDouble.negation=(input)=>-input;;SugarDouble.abs=(input)=>input.abs();;SugarDouble.round=(input)=>input.round();;SugarDouble.floor=(input)=>input.floor();;SugarDouble.ceil=(input)=>input.ceil();;SugarDouble.truncate=(input)=>input.truncate();;SugarDouble.roundToDouble=(input)=>input.roundToDouble();;SugarDouble.floorToDouble=(input)=>input.floorToDouble();;SugarDouble.ceilToDouble=(input)=>input.ceilToDouble();;SugarDouble.truncateToDouble=(input)=>input.truncateToDouble();;SugarDouble.doubleToString=(input)=>input.toString();;SugarDouble.parse=(source)=>double.parse(source);;SugarDouble.tryParse=(source)=>double.tryParse(source);;function SugarInt(){const inner=SugarInt.__inner__;if(this==__global__){return new SugarInt({__args__:arguments});}else{const args=arguments.length>0?arguments[0].__args__||arguments:[];inner.apply(this,args);SugarInt.prototype.ctor.apply(this,args);return this;}}SugarInt.__inner__=function inner(){};SugarInt.prototype={};SugarInt.prototype.ctor=function(){};SugarInt._=function ctor(){const __thiz__=Object.create(SugarInt.prototype);SugarInt.__inner__.call(__thiz__);with(__thiz__){(function(){}).call(__thiz__);}return __thiz__;};SugarInt.isEven=(input)=>input.isEven;;SugarInt.isOdd=(input)=>input.isOdd;;SugarInt.bitLength=(input)=>input.bitLength;;SugarInt.sign=(input)=>input.sign;;SugarInt.and=(input,other)=>input&other;;SugarInt.or=(input,other)=>input|other;;SugarInt.exclusiveOr=(input,other)=>input^other;;SugarInt.negate=(input)=>~input;;SugarInt.leftShift=(input,shiftAmount)=>input<<shiftAmount;;SugarInt.rightShift=(input,shiftAmount)=>input>>shiftAmount;;SugarInt.unsignedRightShift=(input,shiftAmount)=>input>>>shiftAmount;;SugarInt.modPow=(input,exponent,modulus)=>input.modPow(exponent,modulus);;SugarInt.modInverse=(input,modulus)=>input.modInverse(modulus);;SugarInt.gcd=(input,other)=>input.gcd(other);;SugarInt.toUnsigned=(input,width)=>input.toUnsigned(width);;SugarInt.toSigned=(input,width)=>input.toSigned(width);;SugarInt.negation=(input)=>-input;;SugarInt.abs=(input)=>input.abs();;SugarInt.round=(input)=>input.round();;SugarInt.floor=(input)=>input.floor();;SugarInt.ceil=(input)=>input.ceil();;SugarInt.truncate=(input)=>input.truncate();;SugarInt.roundToDouble=(input)=>input.roundToDouble();;SugarInt.floorToDouble=(input)=>input.floorToDouble();;SugarInt.ceilToDouble=(input)=>input.ceilToDouble();;SugarInt.truncateToDouble=(input)=>input.truncateToDouble();;SugarInt.intToString=(input)=>input.toString();;SugarInt.toRadixString=(input,radix)=>input.toRadixString(radix);;SugarInt.parse=(source)=>int.parse(source,{radix:radix});;SugarInt.tryParse=(source)=>int.tryParse(source,{radix:radix});;function SugarList(){const inner=SugarList.__inner__;if(this==__global__){return new SugarList({__args__:arguments});}else{const args=arguments.length>0?arguments[0].__args__||arguments:[];inner.apply(this,args);SugarList.prototype.ctor.apply(this,args);return this;}}SugarList.__inner__=function inner(){};SugarList.prototype={};SugarList.prototype.ctor=function(){};SugarList._=function ctor(){const __thiz__=Object.create(SugarList.prototype);SugarList.__inner__.call(__thiz__);with(__thiz__){(function(){}).call(__thiz__);}return __thiz__;};SugarList.filled=(length,fill)=>List.filled(length,fill,{growable:growable});;SugarList.empty=()=>List.empty({growable:growable});;SugarList.from=(elements)=>List.from(elements,{growable:growable});;SugarList.of=(elements)=>List.of(elements,{growable:growable});;SugarList.generate=(length,generator)=>List.generate(length,generator,{growable:growable});;SugarList.unmodifiable=(elements)=>List.unmodifiable(elements);;SugarList.length=(input)=>input.length;;SugarList.reversed=(input)=>input.reversed;;SugarList.castFrom=(source)=>List.castFrom(source);;SugarList.copyRange=(target,at,source)=>List.copyRange(target,at,source,start,end);;SugarList.writeIterable=(target,at,source)=>List.writeIterable(target,at,source);;SugarList.cast=(input)=>input.cast();;SugarList.get=(input,index)=>input.__op_idx__(index);;SugarList.set=(input,index,value)=>input.__op_idxeq__(index,value);;SugarList.add=(input,value)=>input.add(value);;SugarList.addAll=(input,iterable)=>input.addAll(iterable);;SugarList.sort=(input)=>input.sort(compare);;SugarList.shuffle=(input)=>input.shuffle(random);;SugarList.indexOf=(input,element)=>input.indexOf(element,start);;SugarList.indexWhere=(input,test)=>input.indexWhere(test,start);;SugarList.lastIndexWhere=(input,test)=>input.lastIndexWhere(test,start);;SugarList.lastIndexOf=(input,element)=>input.lastIndexOf(element,start);;SugarList.clear=(input)=>input.clear();;SugarList.insert=(input,index,element)=>input.insert(index,element);;SugarList.insertAll=(input,index,iterable)=>input.insertAll(index,iterable);;SugarList.setAll=(input,index,iterable)=>input.setAll(index,iterable);;SugarList.remove=(input,value)=>input.remove(value);;SugarList.removeAt=(input,index)=>input.removeAt(index);;SugarList.removeLast=(input)=>input.removeLast();;SugarList.removeWhere=(input,test)=>input.removeWhere(test);;SugarList.retainWhere=(input,test)=>input.retainWhere(test);;SugarList.adds=(input,other)=>input+other;;SugarList.sublist=(input,start)=>input.sublist(start,end);;SugarList.getRange=(input,start,end)=>input.getRange(start,end);;SugarList.setRange=(input,start,end,iterable)=>input.setRange(start,end,iterable,skipCount);;SugarList.removeRange=(input,start,end)=>input.removeRange(start,end);;SugarList.fillRange=(input,start,end)=>input.fillRange(start,end,fillValue);;SugarList.replaceRange=(input,start,end,replacements)=>input.replaceRange(start,end,replacements);;SugarList.asMap=(input)=>input.asMap();;SugarList.equalTo=(input,other)=>input==other;;function SugarNum(){const inner=SugarNum.__inner__;if(this==__global__){return new SugarNum({__args__:arguments});}else{const args=arguments.length>0?arguments[0].__args__||arguments:[];inner.apply(this,args);SugarNum.prototype.ctor.apply(this,args);return this;}}SugarNum.__inner__=function inner(){};SugarNum.prototype={};SugarNum.prototype.ctor=function(){};SugarNum._=function ctor(){const __thiz__=Object.create(SugarNum.prototype);SugarNum.__inner__.call(__thiz__);with(__thiz__){(function(){}).call(__thiz__);}return __thiz__;};SugarNum.isNaN=(input)=>input.isNaN;;SugarNum.isNegative=(input)=>input.isNegative;;SugarNum.isInfinite=(input)=>input.isInfinite;;SugarNum.isFinite=(input)=>input.isFinite;;SugarNum.sign=(input)=>input.sign;;SugarNum.equalTo=(input,other)=>input==other;;SugarNum.compareTo=(input,other)=>input.compareTo(other);;SugarNum.adds=(input,other)=>input+other;;SugarNum.subtracts=(input,other)=>input-other;;SugarNum.multiplies=(input,other)=>input*other;;SugarNum.euclideanModulo=(input,other)=>input%other;;SugarNum.divides=(input,other)=>input/other;;SugarNum.truncatingDivision=(input,other)=>input~/other;;SugarNum.negation=(input)=>-input;;SugarNum.remainder=(input,other)=>input.remainder(other);;SugarNum.smallerThan=(input,other)=>input<other;;SugarNum.smallerThanOrEqualTo=(input,other)=>input<=other;;SugarNum.greaterThan=(input,other)=>input>other;;SugarNum.greaterThanOrEqualTo=(input,other)=>input>=other;;SugarNum.abs=(input)=>input.abs();;SugarNum.round=(input)=>input.round();;SugarNum.floor=(input)=>input.floor();;SugarNum.ceil=(input)=>input.ceil();;SugarNum.truncate=(input)=>input.truncate();;SugarNum.roundToDouble=(input)=>input.roundToDouble();;SugarNum.floorToDouble=(input)=>input.floorToDouble();;SugarNum.ceilToDouble=(input)=>input.ceilToDouble();;SugarNum.truncateToDouble=(input)=>input.truncateToDouble();;SugarNum.clamp=(input,lowerLimit,upperLimit)=>input.clamp(lowerLimit,upperLimit);;SugarNum.toInt=(input)=>input.toInt();;SugarNum.toDouble=(input)=>input.toDouble();;SugarNum.toStringAsFixed=(input,fractionDigits)=>input.toStringAsFixed(fractionDigits);;SugarNum.toStringAsExponential=(input)=>input.toStringAsExponential(fractionDigits);;SugarNum.toStringAsPrecision=(input,precision)=>input.toStringAsPrecision(precision);;SugarNum.numToString=(input)=>input.toString();;SugarNum.parse=(input)=>num.parse(input,onError);;SugarNum.tryParse=(input)=>num.tryParse(input);;function SugarString(){const inner=SugarString.__inner__;if(this==__global__){return new SugarString({__args__:arguments});}else{const args=arguments.length>0?arguments[0].__args__||arguments:[];inner.apply(this,args);SugarString.prototype.ctor.apply(this,args);return this;}}SugarString.__inner__=function inner(){};SugarString.prototype={};SugarString.prototype.ctor=function(){};SugarString._=function ctor(){const __thiz__=Object.create(SugarString.prototype);SugarString.__inner__.call(__thiz__);with(__thiz__){(function(){}).call(__thiz__);}return __thiz__;};SugarString.length=(input)=>input.length;;SugarString.isEmpty=(input)=>input.isEmpty;;SugarString.isNotEmpty=(input)=>input.isNotEmpty;;SugarString.codeUnits=(input)=>input.codeUnits;;SugarString.runes=(input)=>input.runes;;SugarString.getChar=(input,index)=>input.__op_idx__(index);;SugarString.codeUnitAt=(input,index)=>input.codeUnitAt(index);;SugarString.equalTo=(input,other)=>input==other;;SugarString.compareTo=(input,other)=>input.compareTo(other);;SugarString.endsWith=(input,other)=>input.endsWith(other);;SugarString.startsWith=(input,pattern)=>input.startsWith(pattern,index);;SugarString.indexOf=(input,pattern)=>input.indexOf(pattern,start);;SugarString.lastIndexOf=(input,pattern)=>input.lastIndexOf(pattern,start);;SugarString.concatenates=(input,other)=>input+other;;SugarString.substring=(input,start)=>input.substring(start,end);;SugarString.trim=(input)=>input.trim();;SugarString.trimLeft=(input)=>input.trimLeft();;SugarString.trimRight=(input)=>input.trimRight();;SugarString.multipliedConcatenates=(input,times)=>input*times;;SugarString.padLeft=(input,width)=>input.padLeft(width,padding);;SugarString.padRight=(input,width)=>input.padRight(width,padding);;SugarString.contains=(input,other)=>input.contains(other,startIndex);;SugarString.replaceFirst=(input,from,to)=>input.replaceFirst(from,to,startIndex);;SugarString.replaceFirstMapped=(input,from,replace)=>input.replaceFirstMapped(from,replace,startIndex);;SugarString.replaceAll=(input,from,replace)=>input.replaceAll(from,replace);;SugarString.replaceAllMapped=(input,from,replace)=>input.replaceAllMapped(from,replace);;SugarString.replaceRange=(input,start,end,replacement)=>input.replaceRange(start,end,replacement);;SugarString.split=(input,pattern)=>input.split(pattern);;SugarString.splitMapJoin=(input,pattern)=>input.splitMapJoin(pattern,{onMatch:onMatch,onNonMatch:onNonMatch});;SugarString.toLowerCase=(input)=>input.toLowerCase();;SugarString.toUpperCase=(input)=>input.toUpperCase();;}__mod__.exports.SugarIterable=SugarIterable;__mod__.exports.SugarMap=SugarMap;__mod__.exports.SugarBool=SugarBool;__mod__.exports.SugarDouble=SugarDouble;__mod__.exports.SugarInt=SugarInt;__mod__.exports.SugarList=SugarList;__mod__.exports.SugarNum=SugarNum;__mod__.exports.SugarString=SugarString;},[]);defineModule(2,function(__mod__){with(__mod__.imports){function SugarCommon(){const inner=SugarCommon.__inner__;if(this==__global__){return new SugarCommon({__args__:arguments});}else{const args=arguments.length>0?arguments[0].__args__||arguments:[];inner.apply(this,args);SugarCommon.prototype.ctor.apply(this,args);return this;}}SugarCommon.__inner__=function inner(){};SugarCommon.prototype={};SugarCommon.prototype.ctor=function(){};SugarCommon._=function ctor(){const __thiz__=Object.create(SugarCommon.prototype);SugarCommon.__inner__.call(__thiz__);with(__thiz__){(function(){}).call(__thiz__);}return __thiz__;};SugarCommon.returnContainer=function returnContainer(input){const __thiz__=this;const __arg_ctx__={input,};with(__thiz__){with(__arg_ctx__){let builder=function dummy(){return input();};return builder;}}};SugarCommon.colorComputeLuminance=function colorComputeLuminance(color){const __thiz__=this;const __arg_ctx__={color,};with(__thiz__){with(__arg_ctx__){return color.computeLuminance();}}};SugarCommon.getRandomColor=function getRandomColor(index){const __thiz__=this;const __arg_ctx__={index,};with(__thiz__){with(__arg_ctx__){while(_color.length<=index){_color.add(Color.fromARGB(255,Random.secure().nextInt(255),Random.secure().nextInt(255),Random.secure().nextInt(255)));}return _color.__op_idx__(index);}}};SugarCommon.getLuminanceColor=function getLuminanceColor(luminance){const __thiz__=this;const __arg_ctx__={luminance,};with(__thiz__){with(__arg_ctx__){return luminance<0.5?Colors.white:Colors.black;}}};SugarCommon.voidCallBack=function voidCallBack({function,value}={}){const __thiz__=this;const __arg_ctx__={function,value,};with(__thiz__){with(__arg_ctx__){return function dummy(){function.call(value);};}}};SugarCommon.nullOrDefault=(value,defaultValue)=>value??defaultValue;;SugarCommon.isNull=(value)=>value==null;;SugarCommon.mapForEachToList=function mapForEachToList(map,forEach){const __thiz__=this;const __arg_ctx__={map,forEach,};with(__thiz__){with(__arg_ctx__){let list=[];map.forEach(forEach);return list;}}};SugarCommon.dartObjectToMap=function dartObjectToMap(dartObject){const __thiz__=this;const __arg_ctx__={dartObject,};with(__thiz__){with(__arg_ctx__){return Sugar.dartObjectToMap(dartObject);}}};SugarCommon._color=(function(){with(SugarCommon){return[];}})();}__mod__.exports.SugarCommon=SugarCommon;},[]);return runCallback(function(__mod__){with(__mod__.imports){function _DemoPageState(){const inner=_DemoPageState.__inner__;if(this==__global__){return new _DemoPageState({__args__:arguments});}else{const args=arguments.length>0?arguments[0].__args__||arguments:[];inner.apply(this,args);_DemoPageState.prototype.ctor.apply(this,args);return this;}}_DemoPageState.__inner__=function inner(){this.fairProps=__initProps__;this._pageName='#FairKey#';this._data=null;};_DemoPageState.prototype={_getValue:function _getValue(key,defaultValue){const __thiz__=this;const __arg_ctx__={key,defaultValue,};with(__thiz__){with(__arg_ctx__){return defaultValue;}}},};_DemoPageState.prototype.ctor=function(){};;return _DemoPageState();}},[1,2]);})(convertObjectLiteralToSetOrMap(JSON.parse('#FairProps#')));